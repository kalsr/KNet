

# EMAILS VULNERABILITY DETECTOR APPLICATION PROGRAM
# LOKING FOR SUSPICIOYS KEYWORDS SUCH AS "urgent", "update your account", "security", "click", "verify"
# THIS APPLICATION IS READING AN INPUT FILE "input_emails.txt"
# THE SCANNED RESULTS ARE SAVED IN THE FILE "scan_results.txt"
# THE PRGRAM EXPLAINS THE EMAIL VULNERABILITIES & MITIGATION ACTIONS.

# THIS APPLICATION IS DESIGNED & ASSEMBLED BY Kalsnet Technologies.


#python
import re
import random

# Email generation with 6 vulnerable emails and 19 safe ones
def generate_emails():
    safe_emails = [
        {"subject": "Your Package Delivery", "from": "noreply@shippingcompany.com", "body": "Your package is on the way!", "attachments": []},
        {"subject": "Invoice for Your Recent Purchase", "from": "billing@vendor.com", "body": "Attached is your invoice.", "attachments": ["invoice.pdf"]},
        {"subject": "Job Application", "from": "applicant@jobs.com", "body": "Please see my resume attached.", "attachments": ["resume.docx"]},
        {"subject": "Confirm Your Subscription", "from": "news@newsletter.com", "body": "Please confirm your subscription by clicking here.", "attachments": []},
        {"subject": "New Software Available", "from": "noreply@softwareupdates.com", "body": "Download the latest version from our website.", "attachments": []},
        {"subject": "Project Update", "from": "teamlead@company.com", "body": "Here is the latest project update.", "attachments": ["update.pdf"]},
        {"subject": "Meeting Reminder", "from": "meetings@company.com", "body": "Don't forget about the team meeting tomorrow.", "attachments": []},
        {"subject": "Your Order Has Shipped", "from": "sales@store.com", "body": "Your order is on the way!", "attachments": []},
        {"subject": "Holiday Sale!", "from": "promo@store.com", "body": "Get 20% off during our holiday sale!", "attachments": []},
        {"subject": "Unusual Login Activity", "from": "security@service.com", "body": "We noticed a new login from an unknown device. If this wasn't you, please change your password.", "attachments": []},
    ]

    vulnerable_emails = [
        {"subject": "Urgent: Update Your Bank Account", "from": "security@bankfakesite.com", "body": "Please click here to update your account: http://fakesite.com/bank", "attachments": []},
        {"subject": "You've won a prize!", "from": "lottery@prizefakesite.com", "body": "Congratulations! Click here to claim your prize: http://prizescam.com/winner", "attachments": []},
        {"subject": "Important: Read the Attached Document", "from": "hr@company.com", "body": "Please find attached the document you requested.", "attachments": ["document.exe"]},
        {"subject": "Security Update Required", "from": "admin@yourwebsite.com", "body": "Download the attached update to secure your system.", "attachments": ["update.bat"]},
        {"subject": "Action Required: Pay Your Invoice", "from": "billing@vendor.com", "body": "Your invoice is attached.", "attachments": ["invoice.exe"]},
        {"subject": "Email Account Security Notice", "from": "noreply@fakemail.com", "body": "Your email account needs immediate verification: http://phishingsite.com/verify", "attachments": []},
    ]

    # Fix: adjust the number of safe and vulnerable emails being sampled
    safe_sample_size = min(len(safe_emails), 19)  # Use up to 19 safe emails if available
    vulnerable_sample_size = min(len(vulnerable_emails), 6)  # Use up to 6 vulnerable emails

    all_emails = random.sample(safe_emails, safe_sample_size) + random.sample(vulnerable_emails, vulnerable_sample_size)
    random.shuffle(all_emails)

    return all_emails

# Function to write generated emails to the input file
def write_emails_to_file(emails, file_name):
    try:
        with open(file_name, 'w') as file:
            for idx, email in enumerate(emails, start=1):
                file.write(f"Email #{idx}\n")
                file.write(f"Subject: {email['subject']}\n")
                file.write(f"From: {email['from']}\n")
                file.write(f"Body: {email['body']}\n")
                file.write(f"Attachments: {', '.join(email['attachments']) if email['attachments'] else 'None'}\n")
                file.write("\n---\n")  # Separator between emails
    except Exception as e:
        print(f"Error writing to the file: {e}")

# Function to read emails from a file
def read_emails_from_file(file_name):
    emails = []
    try:
        with open(file_name, 'r') as file:
            raw_emails = file.read().split("\n---\n")  # Each email is separated by "---"
            for raw_email in raw_emails:
                if raw_email.strip():  # Ignore empty entries
                    email_lines = raw_email.strip().split("\n")
                    email_data = {
                        "subject": email_lines[1].replace("Subject: ", ""),
                        "from": email_lines[2].replace("From: ", ""),
                        "body": email_lines[3].replace("Body: ", ""),
                        "attachments": email_lines[4].replace("Attachments: ", "").split(", ") if len(email_lines) > 4 else []
                    }
                    emails.append(email_data)
    except Exception as e:
        print(f"Error reading the email file: {e}")
    return emails

# Keywords and patterns for suspicious detection
suspicious_keywords = ["urgent", "update your account", "security", "click", "verify"]
suspicious_file_extensions = [".exe", ".bat", ".js", ".scr"]
phishing_url_pattern = re.compile(r"http[s]?://[^\s]+")

# Store malicious findings
malicious_emails = []
mitigation_actions = []

# Function to check if the email contains malicious activity
def scan_email(email):
    malicious_activity = []
    email_summary = {"subject": email["subject"], "malicious_activity": [], "mitigation_actions": []}

    # Check for suspicious keywords in the email body
    for keyword in suspicious_keywords:
        if keyword in email["body"].lower():
            malicious_activity.append(f"Suspicious keyword found: '{keyword}'")
            email_summary["malicious_activity"].append(f"Keyword '{keyword}' detected.")
            email_summary["mitigation_actions"].append("Verify the sender, do not click on any links.")

    # Check for suspicious links
    if phishing_url_pattern.search(email["body"]):
        malicious_activity.append("Suspicious link found in email body.")
        email_summary["malicious_activity"].append("Suspicious URL detected.")
        email_summary["mitigation_actions"].append("Do not click on the link, report the email.")

    # Check for suspicious attachments
    for attachment in email["attachments"]:
        if any(attachment.endswith(ext) for ext in suspicious_file_extensions):
            malicious_activity.append(f"Suspicious attachment found: {attachment}")
            email_summary["malicious_activity"].append(f"Suspicious attachment '{attachment}' detected.")
            email_summary["mitigation_actions"].append("Do not open the attachment, scan it with an antivirus.")

    # If any malicious activity is found, add to the malicious emails list
    if malicious_activity:
        malicious_emails.append((email, malicious_activity))

    return email_summary

# Main function to generate, process, and save email results
def process_emails(input_file, output_before_file, output_after_file, results_file):
    # Generate emails and write them to the input file
    generated_emails = generate_emails()
    write_emails_to_file(generated_emails, input_file)

    # Read emails from the input file
    emails = read_emails_from_file(input_file)

    # Display emails before scanning
    print("\n\n******* WELCOME EM2 TEAM FOR WATCHING THIS CYBER DEFENSE PLAYBOOK DEMO ******:\n")
    print("\nEMAILS BEFORE SCANNING:\n")
    for idx, email in enumerate(emails, start=1):
        print(f"Email #{idx}")
        print(email)
        print("\n" + "-"*80 + "\n")

    # Save emails to an input file
    write_emails_to_file(emails, output_before_file)

    # Scan emails for malicious content
    email_summaries = [scan_email(email) for email in emails]

    # Display emails after scanning, marking malicious activity
    print("\n\nEMAILS AFTER SCANNING WITH MALICIOUS ACTIVITIES MARKED:\n")
    for idx, (email, findings) in enumerate(malicious_emails, start=1):
        print(f"\nEmail #{idx}: {email}")
        for finding in findings:
            print(f"Malicious activity: {finding}")
        print("\n" + "="*80 + "\n")

    # Display summary of each malicious activity with mitigation actions
    print("\n\nSUMMARY OF MALICIOUS ACTIVITY WITH MITIGATION ACTIONS:")
    for idx, summary in enumerate(email_summaries, start=1):
        if summary["malicious_activity"]:
            print(f"\nEmail #{idx} - Subject: {summary['subject']}")
            for activity, action in zip(summary["malicious_activity"], summary["mitigation_actions"]):
                print(f"Malicious Activity: {activity}")
                print(f"Mitigation Action: {action}")
            print("\n" + "-"*80 + "\n")

    # Save results to files
    write_emails_to_file(emails, output_after_file)  # After scan file
    with open(results_file, "w") as f:
        for idx, summary in enumerate(email_summaries, start=1):
            if summary["malicious_activity"]:
                f.write(f"Email #{idx} - Subject: {summary['subject']}\n")
                for activity, action in zip(summary["malicious_activity"], summary["mitigation_actions"]):
                    f.write(f"  Malicious Activity: {activity}\n")
                    f.write(f"  Mitigation Action: {action}\n")
                f.write("\n" + "-"*80 + "\n")

# Main execution
input_file = "input_emails.txt"
output_before_file = "emails_before_scan.txt"
output_after_file = "emails_after_scan.txt"
results_file = "scan_results.txt"

process_emails(input_file, output_before_file, output_after_file, results_file)

print("\nResults and emails saved to files.")
